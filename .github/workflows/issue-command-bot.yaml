name: Issue Command Bot

on:
  issue_comment:
    types: [created]

permissions:
  issues: write
  pull-requests: write

jobs:
  process-command:
    runs-on: ubuntu-latest
    steps:
      - name: Process Commands
        uses: actions/github-script@v7
        with:
          script: |
            const comment = context.payload.comment.body.trim().toLowerCase();
            const commenter = context.payload.comment.user.login;
            const issueNumber = context.issue.number;
            const repoOwner = context.repo.owner;
            const repoName = context.repo.repo;

            // /assign command
            if (comment === "/assign") {
              await github.rest.issues.addAssignees({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                assignees: [commenter]
              });

              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                body: `üõ†Ô∏è Assigned issue #${issueNumber} to @${commenter}!`
              });
            }

            // /close command with specific reasons
            if (comment.startsWith("/close ")) {
              const closeReason = comment.replace("/close ", "").trim();

              let state = "closed";
              let reason = "";

              if (closeReason === "not-planned") {
                reason = "Not planned";
              } else if (closeReason === "completed") {
                reason = "Completed";
              } else if (closeReason === "inactive") {
                reason = "Inactive";
              } else if (closeReason === "duplicate") {
                reason = "Duplicate";
              } else {
                reason = "Closed"; 
              }

              await github.rest.issues.update({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                state: state
              });

              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                body: `‚úÖ Issue #${issueNumber} has been marked as **${reason}** by @${commenter}.`
              });
            }

            // /reopen command
            if (comment === "/reopen") {
              await github.rest.issues.update({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                state: "open"
              });

              await github.rest.issues.createComment({
                owner: repoOwner,
                repo: repoName,
                issue_number: issueNumber,
                body: `üîÑ Issue #${issueNumber} has been reopened by @${commenter}.`
              });
            }

            // /label command
            if (comment.startsWith("/label ")) {
              const labelName = comment.replace("/label ", "").trim();
  
              if (labelName) {
                try {
                  await github.rest.issues.addLabels({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    labels: [labelName]
                  });

                  await github.rest.issues.createComment({
                    owner: repoOwner,
                    repo: repoName,
                    issue_number: issueNumber,
                    body: `üè∑Ô∏è Added label **"${labelName}"** to issue #${issueNumber}.`
                  });
                } catch (error) {
                  if (error.status === 404) {
                    await github.rest.issues.createLabel({
                      owner: repoOwner,
                      repo: repoName,
                      name: labelName,
                      color: "0e8a16" 
                    });

                    await github.rest.issues.addLabels({
                      owner: repoOwner,
                      repo: repoName,
                      issue_number: issueNumber,
                      labels: [labelName]
                    });

                    await github.rest.issues.createComment({
                      owner: repoOwner,
                      repo: repoName,
                      issue_number: issueNumber,
                      body: `üé® Created and added label **"${labelName}"** (Color: Green) to issue #${issueNumber}.`
                    });
                  } else {
                    throw error;
                  }
                }
              }
            }
